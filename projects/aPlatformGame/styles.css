.background {
  background: rgb(52, 166, 251);
  table-layout: fixed;
  border-spacing: 0;
}
.background td {
  padding: 0;
}
.lava {
  background: rgb(255, 100, 100);
}
.wall {
  background: white;
}

/* 
Some of these (table-layout, border-spacing, and padding) are used to suppress unwanted default behavior. We don’t want the layout of the table to depend upon the contents of its cells, and we don’t want space between the table cells or padding inside them.
The background rule sets the background color. CSS allows colors to be specified both as words (white) or with a format such as rgb(R, G, B), where the red, green, and blue components of the color are separated into three numbers from 0 to 255. In rgb(52, 166, 251), the red component is 52, green is 166, and blue is 251. Since the blue component is the largest, the resulting color will be bluish. In the .lava rule, the first number (red) is the largest.
We draw each actor by creating a DOM element for it and setting that element’s position and size based on the actor’s properties. The values must be multiplied by scale to go from game units to pixels. 
*/

.actor {
  position: absolute;
}
.coin {
  background: rgb(241, 229, 89);
}
.player {
  background: rgb(64, 64, 64);
}

/*
By adding the level’s current status as a class name to the wrapper, we can style the player actor slightly differently when the game is won or lost by adding a CSS rule that takes effect only when the player has an ancestor element with a given class.
*/
.lost .player {
  background: rgb(160, 64, 64);
}
.won .player {
  box-shadow: -4px -7px 8px white, 4px -7px 8px white;
}
/*
After touching lava, the player turns dark red, suggesting scorching. When the last coin has been collected, we add two blurred white shadows—one to the upper left and one to the upper right—to create a white halo effect.
*/
.game {
  overflow: hidden;
  max-width: 600px;
  max-height: 450px;
  position: relative;
}
.monster {
  background: purple;
}
